شرح الكود
إعداد الذاكرة المشتركة والمزامنات:
نقوم بإنشاء الذاكرة المشتركة باستخدام shmget ونربطها باستخدام shmat.
نستخدم ثلاثة مزامنات:
MUTEX: لضمان الوصول الحصري إلى المخزن.
EMPTY: لتتبع الأماكن المتاحة في المخزن.
FULL: لتتبع الأماكن المشغولة في المخزن.
عملية المنتج:
يقوم المنتج بالانتظار على EMPTY للتحقق مما إذا كانت هناك مساحة متاحة، ثم يقوم بقفل المخزن باستخدام MUTEX.
بعد ذلك، يقوم بإدخال عنصر، تحديث مؤشر in، إرسال إشارة إلى FULL، ثم يفتح المخزن.
هذه العملية تتكرر لإنتاج عدة عناصر كما هو محدد في الحلقة.
عملية المستهلك:
يقوم المستهلك بالانتظار على FULL للتحقق مما إذا كانت هناك عناصر متاحة، ثم يقوم بقفل المخزن باستخدام MUTEX.
بعد ذلك، يزيل عنصرًا، يقوم بتحديث مؤشر out، يرسل إشارة إلى EMPTY للسماح بإضافة المزيد من العناصر، ثم يفتح المخزن.
هذه العملية تتكرر لاستهلاك عدة عناصر.
إنشاء العمليات:
تقوم الدالة الرئيسية بإنشاء عدد من العمليات للمنتجين والمستهلكين حسب القيم المحددة لـ NUM_PRODUCERS و NUM_CONSUMERS.
كل منتج ومستهلك يعمل بشكل مستقل، مع الوصول المتزامن إلى المخزن المشترك.
التنظيف:
بعد أن تنتهي جميع العمليات، نقوم بفصل وإزالة الذاكرة المشتركة والمزامنات.
التحديات واختيارات التصميم
حالات السباق (Race Conditions):
استخدمنا المزامنات MUTEX و FULL و EMPTY لتجنب حالات السباق وضمان الوصول الآمن إلى المخزن.
التزامن:
تساعد المزامنات EMPTY و FULL في تنسيق متى يمكن للمنتج أن ينتج ومتى يمكن للمستهلك أن يستهلك.
التواصل بين العمليات:
تتيح الذاكرة المشتركة و المزامنات بنظام System V التواصل الفعال بين العمليات المنتجة والمستهلكة.
القابلية للتوسع:
يسمح هذا التصميم بإضافة المزيد من المنتجات أو المستهلكين ببساطة عن طريق تعديل قيم NUM_PRODUCERS و NUM_CONSUMERS.
هذا الحل يضمن أن الوصول إلى المخزن المشترك يتم بطريقة متزامنة بين المنتجين والمستهلكين، مما يمنع حالات السباق ويحقق استخدامًا فعالًا للمخزن.